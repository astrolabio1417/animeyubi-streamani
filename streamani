import base64
import requests, re, json
from bs4 import BeautifulSoup


class Streamani:
    def __init__(self, host="https://gogoplay.io/"):
        self.host = host
        self.headers = {
            "referer": self.host,
            "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.100 Safari/537.36",
        }
        self.session = requests.Session()

    def _requests(self, url):
        return self.session.get(url, headers=self.headers, timeout=(5, 10))

    def _requests_to_soup(self, url):
        res = self._requests(url)
        soup = BeautifulSoup(res.text, "html.parser")

        if res.status_code != 200:
            return None

        if soup.text.strip("\n") == "404":
            raise ValueError("Request got 404 or The page is not available.")

        return soup

    def _soup_pagination(self, soup):
        prev = soup.find("li", class_="previous")
        next = soup.find("li", class_="next")

        return {
            "prev": prev.find("a").get("href").strip("?page=") if prev else None,
            "next": next.find("a").get("href").strip("?page=") if next else None,
        }

    def _soup_list(self, soup):
        data = []
        soup = soup.find("ul", class_=["listing", "items", "lists"])
        lists = soup.find_all("li", class_="video-block")

        if not lists or len(lists) == 0:
            return None

        for anime in lists:
            slug = anime.find("a").get("href").replace("/videos/", "")
            split_slug = re.search("(.*)(-episode-)", slug)
            title = anime.find("div", class_="name").text.strip()

            data.append(
                {
                    "title": title,
                    "anime": re.sub("Episode \d+", "", title).strip(),
                    "episode": slug.split("-episode-")[-1]
                    if "episode" in slug
                    else "0",
                    "image": anime.find("img").get("src"),
                    "release": anime.find("span", class_="date").text.strip(),
                    "slug": split_slug.group(1) if split_slug else slug,
                }
            )

        return data

    def get_downloads(self, iframe):
        iframe_id = re.search("id=(.*?)&", iframe).group(1)
        secretKey = "25746538592938396764662879833288"
        initializationVector = "4206913378008135"
        from Crypto.Cipher import AES
        from Crypto.Util.Padding import pad

        cipher = AES.new(
            secretKey.encode(), AES.MODE_CBC, iv=initializationVector.encode()
        )
        iframe_id = pad(iframe_id.encode(), cipher.block_size)
        id = base64.b64encode(cipher.encrypt(iframe_id)).decode()

        newHeaders = self.headers
        newHeaders["X-Requested-With"] = "XMLHttpRequest"
        try:
            return json.loads(
                requests.get(
                    f"https://gogoplay.io/encrypt-ajax.php?id={id}&time=69420691337800813569",
                    headers=newHeaders,
                    timeout=(5, 10),
                ).text
            )
        except Exception as err:
            print(err)
            return None

    def index_page(self, page=1):
        soup = self._requests_to_soup(self.host + f"?page={page}")
        return {
            "results": self._soup_list(soup),
            "pagination": self._soup_pagination(soup),
        }

    def search_page(self, query: str, page=1):
        soup = self._requests_to_soup(
            f"{self.host}search.html?keyword={query}&page={page}"
        )
        return {
            "results": self._soup_list(soup),
            "pagination": self._soup_pagination(soup),
        }

    def episode_info(self, slug, episode, sort=False):
        url = (
            f"{self.host}videos/{slug}{f'-episode-{episode}' if episode != '0' else ''}"
        )
        soup = self._requests_to_soup(url)
        not_sorted_list = self._soup_list(soup)
        sorted_episode_list = not_sorted_list[::-1]
        current_episode, next, prev = [None] * 3

        for index, item in enumerate(sorted_episode_list):
            if item["episode"] == str(episode):
                prev = sorted_episode_list[index - 1] if index != 0 else None
                next = (
                    sorted_episode_list[index + 1]
                    if index != (len(not_sorted_list) - 1)
                    else None
                )
                current_episode = item
                break

        return {
            "results": {
                "episode_list": sorted_episode_list if sort else not_sorted_list,
                "current": current_episode,
                "iframe": "https:" + soup.find("iframe").get("src"),
            },
            "next": next,
            "prev": prev,
        }

    def anime_info(self, slug):
        soup = self._requests_to_soup(f"https://gogoanime.fi/category/{slug}")
        infos = soup.find("div", class_="anime_info_body_bg").find_all(
            "p", class_="type"
        )
        return {
            "title": soup.find("meta", property="og:title")
            .get("content")
            .strip(" at Gogoanime"),
            "image": soup.find("meta", property="og:image").get("content"),
            "title_alt": infos[5].text.strip("Other name: ").strip().split(", "),
            "type": infos[0].find("a").text.strip(),
            "description": infos[1].text.strip("Plot Summary: ").strip(),
            "genres": infos[2].text.strip("Genre:").strip().split(", "),
            "release": infos[3].text.strip("Released:").strip(),
            "status": infos[4].text.strip("Status:").strip(),
        }


if __name__ == "__main__":
    ani = Streamani()

    # HOME
    print(ani.index_page(page=1))

    # SEARCH
    print(ani.search_page(query="slime", page=1))

    # ANIME
    print(
        ani.anime_info(
            slug="shuumatsu-nani-shitemasu-ka-isogashii-desu-ka-sukutte-moratte-ii-desu-ka"
        )
    )

    # EPISODE
    print(
        ani.episode_info(
            slug="tensei-shitara-slime-datta-ken-2nd-season-part-2", episode="0"
        )
    )

    # VIDEOS
    print(ani.get_downloads("https://gogoplay.io/streaming.php?id=MTgxMTk3&"))
